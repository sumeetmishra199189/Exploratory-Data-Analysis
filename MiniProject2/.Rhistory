our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 6, 1), POP_2 = seq(1, 6, 1),POP_3 = seq(1, 6, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1+POP_2+POP_3,color =(predicted_swing_voter_status))) + geom_point()+ stat_function(fun = our.logit, color = "orange")
our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 6, 1), POP_2 = seq(1, 6, 1),POP_3 = seq(1, 6, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1,group=POP_2,color =POP_2)) + geom_point()+ stat_function(fun = our.logit, color = "orange")
our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 6, 1), POP_2 = seq(1, 6, 1),POP_3 = seq(1, 6, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1,group=POP_2,color =POP_2)) + geom_line()+ stat_function(fun = our.logit, color = "orange")
our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 6, 1), POP_2 = seq(1, 6, 1),POP_3 = seq(1, 6, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1,group=POP_2,color =POP_2)) + geom_jitter()+ stat_function(fun = our.logit, color = "orange")
our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 5, 1), POP_2 = seq(1, 5, 1),POP_3 = seq(1, 5, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1,group=POP_2,color =POP_2)) + geom_jitter()+ stat_function(fun = our.logit, color = "orange")
our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 5, 1), POP_2 = seq(1, 5, 1),POP_3 = seq(1, 5, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1,group=POP_2,color =POP_2)) + geom_line()+ stat_function(fun = our.logit, color = "orange")
our.logit=function(x){
coe = coef(swing.weighted.logit)
y = coe[1]+coe[2]*x
return (exp(y)/(1 + exp(y)))
}
#dfp1$vote_status <- ifelse(dfp1$presvote16post == dfp1$house3, dfp1$house3, 10)
dfp4=subset(dfp1)
dfp4$swing_voter_status <- ifelse(dfp4$vote_status!=10,0,1)
#View(dfp4)
dfp_p.lo = loess( swing_voter_status~POP_1*POP_2*POP_3 , data =dfp4, span = 1, family="symmetric", normalize=FALSE)
newdata1 = expand.grid(POP_1 = seq(1, 5, 1), POP_2 = seq(1, 5, 1),POP_3 = seq(1, 5, 1))
dfp_p.pred1 = predict(dfp_p.lo, newdata = newdata1)
dfp_p.pred1 = data.frame(newdata1, predicted_swing_voter_status = as.vector(dfp_p.pred1))
#ggplot(dfp_p.pred1, aes( x = predicted_swing_voter_status, y=..density..,fill =(predicted_swing_voter_status))) + geom_histogram(abcd)
ggplot(dfp_p.pred1, aes( y = predicted_swing_voter_status,x=POP_1,group=POP_2,color =POP_2)) + geom_point()+ stat_function(fun = our.logit, color = "orange")
swing.weighted.logit = glm(swing_voter_status ~ POP_1+POP_2+POP_3, family = quasibinomial, weights =weight_DFP , data = dfp4)
pop.df = expand.grid(POP_1=seq(1,5,1),POP_2=seq(1,5,1),POP_3=seq(1,5,1))
pop.pred = predict( swing.weighted.logit, type = "response", newdata = pop.df)
pop.pred.df = data.frame(pop.df, swing.prob = as.vector(pop.pred))
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_2,color=POP_2)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#ggplot(pop.pred.df, aes(x = POP_2, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#ggplot(pop.pred.df, aes(x = POP_3, y = swing.prob,group=POP_1,color=POP_1)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#+ xlab("Distance from nearest safe well") + ylab("Probability of switching labs(color = "Arsenic concentration")
#summary( swing.weighted.logit )
swing.weighted.logit = glm(swing_voter_status ~ POP_1+POP_2, family = quasibinomial, weights =weight_DFP , data = dfp4)
pop.df = expand.grid(POP_1=seq(1,5,1),POP_2=seq(1,5,1),POP_3=seq(1,5,1))
pop.pred = predict( swing.weighted.logit, type = "response", newdata = pop.df)
pop.pred.df = data.frame(pop.df, swing.prob = as.vector(pop.pred))
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_2,color=POP_2)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#ggplot(pop.pred.df, aes(x = POP_2, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#ggplot(pop.pred.df, aes(x = POP_3, y = swing.prob,group=POP_1,color=POP_1)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#+ xlab("Distance from nearest safe well") + ylab("Probability of switching labs(color = "Arsenic concentration")
#summary( swing.weighted.logit )
swing.weighted.logit = glm(swing_voter_status ~ POP_1+POP_2, family = quasibinomial, weights =weight_DFP , data = dfp4)
pop.df = expand.grid(POP_1=seq(1,5,1),POP_2=seq(1,5,1),POP_3=seq(1,5,1))
pop.pred = predict( swing.weighted.logit, type = "response", newdata = pop.df)
pop.pred.df = data.frame(pop.df, swing.prob = as.vector(pop.pred))
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_2,color=POP_2)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_2, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_3, y = swing.prob,group=POP_1,color=POP_1)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#+ xlab("Distance from nearest safe well") + ylab("Probability of switching labs(color = "Arsenic concentration")
#summary( swing.weighted.logit )
swing.weighted.logit = glm(swing_voter_status ~ POP_1+POP_2, family = quasibinomial, weights =weight_DFP , data = dfp4)
pop.df = expand.grid(POP_1=seq(1,5,1),POP_2=seq(1,5,1),POP_3=seq(1,5,1))
pop.pred = predict( swing.weighted.logit, type = "response", newdata = pop.df)
pop.pred.df = data.frame(pop.df, swing.prob = as.vector(pop.pred))
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_2,color=POP_2)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_2, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#+ xlab("Distance from nearest safe well") + ylab("Probability of switching labs(color = "Arsenic concentration")
#summary( swing.weighted.logit )
swing.weighted.logit = glm(swing_voter_status ~ POP_1*POP_2, family = quasibinomial, weights =weight_DFP , data = dfp4)
pop.df = expand.grid(POP_1=seq(1,5,1),POP_2=seq(1,5,1),POP_3=seq(1,5,1))
pop.pred = predict( swing.weighted.logit, type = "response", newdata = pop.df)
pop.pred.df = data.frame(pop.df, swing.prob = as.vector(pop.pred))
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_2,color=POP_2)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_2, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#+ xlab("Distance from nearest safe well") + ylab("Probability of switching labs(color = "Arsenic concentration")
#summary( swing.weighted.logit )
swing.weighted.logit = glm(swing_voter_status ~ POP_1+POP_2, family = quasibinomial, weights =weight_DFP , data = dfp4)
pop.df = expand.grid(POP_1=seq(1,5,1),POP_2=seq(1,5,1),POP_3=seq(1,5,1))
pop.pred = predict( swing.weighted.logit, type = "response", newdata = pop.df)
pop.pred.df = data.frame(pop.df, swing.prob = as.vector(pop.pred))
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_2,color=POP_2)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_2, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
ggplot(pop.pred.df, aes(x = POP_1, y = swing.prob,group=POP_3,color=POP_3)) +geom_line()+scale_x_continuous(breaks = seq(1, 5))+theme_bw()
#+ xlab("Distance from nearest safe well") + ylab("Probability of switching labs(color = "Arsenic concentration")
#summary( swing.weighted.logit )
